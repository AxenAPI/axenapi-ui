buildscript {
    dependencies {
        classpath 'com.brunomnsilva:smartgraph:1.0.0'
    }
}
plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.24.1'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '21'
targetCompatibility = '21'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'org.example.demojavafx'
    mainClass = 'org.example.demojavafx.HelloApplication'
}

javafx {
    version = '21'
    modules = ['javafx.controls', 'javafx.fxml']


}

tasks.jar {
    manifest {
        attributes["Main-Class"] = "org.example.demojavafx.HelloApplication"
    }
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0')

    implementation('com.brunomnsilva:smartgraph:2.0.0-rc2')
    implementation ('io.swagger.parser.v3:swagger-parser:2.1.20') {
        exclude(group: 'javax.validation')
        exclude(group: 'com.github.java-json-tools')
        exclude(group: 'io.swagger')
    }
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation ('ch.qos.logback:logback-classic:1.4.14')
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'


    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'WinApplication'
    }

    jpackage() {
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            imageOptions += ['--icon', 'icon.ico']
        }
        imageOptions += ['--vendor', 'MyCompany'
        ]
        installerOptions += [
                '--vendor', 'MyCompany',
                '--app-version', version
        ]
    }
}

jlinkZip {
    group = 'distribution'
}
